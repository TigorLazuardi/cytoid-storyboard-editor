!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/a3c87ab5/
.App	src/App.css	/^.App {$/;"	c
.App-header	src/App.css	/^.App-header {$/;"	c
.App-link	src/App.css	/^.App-link {$/;"	c
.App-logo	src/App.css	/^  .App-logo {$/;"	c
.App-logo	src/App.css	/^.App-logo {$/;"	c
0	package.json	/^      ">0.2%",$/;"	s	array:browserslist.production
0	package.json	/^      "last 1 chrome version",$/;"	s	array:browserslist.development
0	public/manifest.json	/^    {$/;"	o	array:icons
0	tsconfig.json	/^      "dom",$/;"	s	array:compilerOptions.lib
0	tsconfig.json	/^    "src"$/;"	s	array:include
1	package.json	/^      "last 1 firefox version",$/;"	s	array:browserslist.development
1	package.json	/^      "not dead",$/;"	s	array:browserslist.production
1	public/manifest.json	/^    {$/;"	o	array:icons
1	tsconfig.json	/^      "dom.iterable",$/;"	s	array:compilerOptions.lib
2	package.json	/^      "last 1 safari version"$/;"	s	array:browserslist.development
2	package.json	/^      "not op_mini all"$/;"	s	array:browserslist.production
2	public/manifest.json	/^    {$/;"	o	array:icons
2	tsconfig.json	/^      "esnext"$/;"	s	array:compilerOptions.lib
@testing-library/jest-dom	package.json	/^    "@testing-library\/jest-dom": "^4.2.4",$/;"	s	object:dependencies
@testing-library/react	package.json	/^    "@testing-library\/react": "^9.3.2",$/;"	s	object:dependencies
@testing-library/user-event	package.json	/^    "@testing-library\/user-event": "^7.1.2",$/;"	s	object:dependencies
@types/jest	package.json	/^    "@types\/jest": "^24.0.0",$/;"	s	object:dependencies
@types/node	package.json	/^    "@types\/node": "^12.0.0",$/;"	s	object:dependencies
@types/react	package.json	/^    "@types\/react": "^16.9.0",$/;"	s	object:dependencies
@types/react-dom	package.json	/^    "@types\/react-dom": "^16.9.0",$/;"	s	object:dependencies
Available Scripts	README.md	/^## Available Scripts$/;"	s
Config	src/serviceWorker.ts	/^type Config = {$/;"	a
Learn More	README.md	/^## Learn More$/;"	s
`yarn build`	README.md	/^### `yarn build`$/;"	S
`yarn eject`	README.md	/^### `yarn eject`$/;"	S
`yarn start`	README.md	/^### `yarn start`$/;"	S
`yarn test`	README.md	/^### `yarn test`$/;"	S
allowJs	tsconfig.json	/^    "allowJs": true,$/;"	b	object:compilerOptions
allowSyntheticDefaultImports	tsconfig.json	/^    "allowSyntheticDefaultImports": true,$/;"	b	object:compilerOptions
author	package.json	/^  "author": {$/;"	o
background_color	public/manifest.json	/^  "background_color": "#ffffff"$/;"	s
body	src/index.css	/^body {$/;"	s
browserslist	package.json	/^  "browserslist": {$/;"	o
build	package.json	/^    "build": "react-scripts build",$/;"	s	object:scripts
checkValidServiceWorker	src/serviceWorker.ts	/^function checkValidServiceWorker(swUrl: string, config?: Config) {$/;"	f
code	src/index.css	/^code {$/;"	s
compilerOptions	tsconfig.json	/^  "compilerOptions": {$/;"	o
concurrently	package.json	/^    "concurrently": "^5.1.0",$/;"	s	object:devDependencies
contentType	src/serviceWorker.ts	/^      const contentType = response.headers.get('content-type');$/;"	C	function:checkValidServiceWorker
dependencies	package.json	/^  "dependencies": {$/;"	o
devDependencies	package.json	/^  "devDependencies": {$/;"	o
development	package.json	/^    "development": [$/;"	a	object:browserslist
display	public/manifest.json	/^  "display": "standalone",$/;"	s
eject	package.json	/^    "eject": "react-scripts eject",$/;"	s	object:scripts
electron	package.json	/^    "electron": "^8.2.0",$/;"	s	object:devDependencies
electron-builder	package.json	/^    "electron-builder": "^22.4.1",$/;"	s	object:devDependencies
electron-dev	package.json	/^    "electron-dev": "concurrently \\"BROWSER=NONE npm start\\" \\"wait-on http:\/\/localhost:300/;"	s	object:scripts
electron-is-dev	package.json	/^    "electron-is-dev": "^1.1.0",$/;"	s	object:devDependencies
email	package.json	/^    "email": "tigor.hutasuhut@gmail.com",$/;"	s	object:author
esModuleInterop	tsconfig.json	/^    "esModuleInterop": true,$/;"	b	object:compilerOptions
eslintConfig	package.json	/^  "eslintConfig": {$/;"	o
extends	package.json	/^    "extends": "react-app"$/;"	s	object:eslintConfig
forceConsistentCasingInFileNames	tsconfig.json	/^    "forceConsistentCasingInFileNames": true,$/;"	b	object:compilerOptions
icons	public/manifest.json	/^  "icons": [$/;"	a
include	tsconfig.json	/^  "include": [$/;"	a
installingWorker	src/serviceWorker.ts	/^        const installingWorker = registration.installing;$/;"	C	function:registerValidSW
isLocalhost	src/serviceWorker.ts	/^const isLocalhost = Boolean($/;"	C
isolatedModules	tsconfig.json	/^    "isolatedModules": true,$/;"	b	object:compilerOptions
jsx	tsconfig.json	/^    "jsx": "react"$/;"	s	object:compilerOptions
lib	tsconfig.json	/^    "lib": [$/;"	a	object:compilerOptions
main	package.json	/^  "main": "public\/electron.js",$/;"	s
module	tsconfig.json	/^    "module": "esnext",$/;"	s	object:compilerOptions
moduleResolution	tsconfig.json	/^    "moduleResolution": "node",$/;"	s	object:compilerOptions
name	package.json	/^    "name": "CrowFX",$/;"	s	object:author
name	package.json	/^  "name": "cytoid-storyboard-editor",$/;"	s
name	public/manifest.json	/^  "name": "Create React App Sample",$/;"	s
noEmit	tsconfig.json	/^    "noEmit": true,$/;"	b	object:compilerOptions
nsb0aa9e8b0101	src/logo.svg	/^<svg xmlns="http:\/\/www.w3.org\/2000\/svg" viewBox="0 0 841.9 595.3">$/;"	n	uri:http://www.w3.org/2000/svg
private	package.json	/^  "private": true,$/;"	b
production	package.json	/^    "production": [$/;"	a	object:browserslist
publicUrl	src/serviceWorker.ts	/^    const publicUrl = new URL($/;"	C	function:register
react	package.json	/^    "react": "^16.13.1",$/;"	s	object:dependencies
react-dom	package.json	/^    "react-dom": "^16.13.1",$/;"	s	object:dependencies
react-scripts	package.json	/^    "react-scripts": "3.4.1",$/;"	s	object:dependencies
register	src/serviceWorker.ts	/^export function register(config?: Config) {$/;"	f
registerValidSW	src/serviceWorker.ts	/^function registerValidSW(swUrl: string, config?: Config) {$/;"	f
resolveJsonModule	tsconfig.json	/^    "resolveJsonModule": true,$/;"	b	object:compilerOptions
root	public/index.html	/^    <div id="root"><\/div>$/;"	I
scripts	package.json	/^  "scripts": {$/;"	o
short_name	public/manifest.json	/^  "short_name": "React App",$/;"	s
sizes	public/manifest.json	/^      "sizes": "192x192"$/;"	s	object:icons.1
sizes	public/manifest.json	/^      "sizes": "512x512"$/;"	s	object:icons.2
sizes	public/manifest.json	/^      "sizes": "64x64 32x32 24x24 16x16",$/;"	s	object:icons.0
skipLibCheck	tsconfig.json	/^    "skipLibCheck": true,$/;"	b	object:compilerOptions
src	public/manifest.json	/^      "src": "favicon.ico",$/;"	s	object:icons.0
src	public/manifest.json	/^      "src": "logo192.png",$/;"	s	object:icons.1
src	public/manifest.json	/^      "src": "logo512.png",$/;"	s	object:icons.2
start	package.json	/^    "start": "react-scripts start",$/;"	s	object:scripts
start_url	public/manifest.json	/^  "start_url": ".",$/;"	s
strict	tsconfig.json	/^    "strict": true,$/;"	b	object:compilerOptions
swUrl	src/serviceWorker.ts	/^      const swUrl = `${process.env.PUBLIC_URL}\/service-worker.js`;$/;"	C	function:register
target	tsconfig.json	/^    "target": "es5",$/;"	s	object:compilerOptions
test	package.json	/^    "test": "react-scripts test",$/;"	s	object:scripts
theme_color	public/manifest.json	/^  "theme_color": "#000000",$/;"	s
type	public/manifest.json	/^      "type": "image\/png",$/;"	s	object:icons.1
type	public/manifest.json	/^      "type": "image\/png",$/;"	s	object:icons.2
type	public/manifest.json	/^      "type": "image\/x-icon"$/;"	s	object:icons.0
typescript	package.json	/^    "typescript": "~3.7.2"$/;"	s	object:dependencies
unregister	src/serviceWorker.ts	/^export function unregister() {$/;"	f
url	package.json	/^    "url": "https:\/\/www.github.com\/TigorLazuardi"$/;"	s	object:author
version	package.json	/^  "version": "0.1.0",$/;"	s
wait-on	package.json	/^    "wait-on": "^4.0.1"$/;"	s	object:devDependencies
